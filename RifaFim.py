import random

# üìù Controle de Rifas üéüÔ∏è
print("üóíÔ∏èÀñ  ‡ºã : Controle de rifas ñ¶Ü ‚è±Ô∏è „ÅÉ Àë   ÷∫ ñ•ª ÷¥ €´  ÷º  ñ•î ìÑº ÷ó  ñ•î")

# Exce√ß√µes personalizadas
class NumeroIndisponivelError(Exception):
    def __init__(self, numero):
        self.numero = numero

class LimiteVendasExcedidoError(Exception):
    def __init__(self, limite):
        super().__init__(f"Ops! O limite de venda de {limite} n√∫meros foi atingido.")
        self.limite = limite

# Classe Rifa
class Rifa:
    def __init__(self, nome, qntdNumeros, precoNumero):
        self.nome = nome
        self.qntdNumeros = qntdNumeros
        self.precoNumero = precoNumero
        self.numerosVendidos = []  # Lista para armazenar os n√∫meros vendidos

    # M√©todos getters e setters
    def get_nome(self):
        return self.nome

    def set_nome(self, nome):
        self.nome = nome

    def get_qntd_numeros(self):
        return self.qntdNumeros

    def set_qntd_numeros(self, qntdNumeros):
        self.qntdNumeros = qntdNumeros

    def get_preco_numero(self):
        return self.precoNumero

    def set_preco_numero(self, precoNumero):
        self.precoNumero = precoNumero

    def get_numeros_vendidos(self):
        return self.numerosVendidos

    def set_numeros_vendidos(self, numerosVendidos):
        self.numerosVendidos = numerosVendidos

    # M√©todo para exibir as informa√ß√µes da rifa
    def exibir_rifa(self):
        print(f'''
Rifa: {self.nome}
Total de N√∫meros Dispon√≠veis: {self.qntdNumeros}
Pre√ßo por n√∫mero: {self.precoNumero}''')

    # M√©todo para vender um n√∫mero
    def vender_numero(self, numero):
        """M√©todo para vender um n√∫mero da rifa com verifica√ß√µes de erro."""
        try:
            # Verificando se o limite de vendas foi atingido
            if len(self.numerosVendidos) >= self.qntdNumeros:
                raise LimiteVendasExcedidoError(self.qntdNumeros)

            # Verificando se o n√∫mero j√° foi vendido
            if numero in self.numerosVendidos:
                raise NumeroIndisponivelError(numero)

            # Adicionando o n√∫mero vendido √† lista
            self.numerosVendidos.append(numero)
            print(f"Sucesso! O n√∫mero {numero} foi vendido com sucesso.")
        
        except NumeroIndisponivelError as erro:
            print(f"Erro! O n√∫mero {erro.numero} j√° foi vendido ou n√£o est√° dispon√≠vel.")
        except LimiteVendasExcedidoError as erro:
            print(erro)  # Exibe o erro personalizado de limite excedido
        finally:
            print("Venda finalizada (ou tentativa conclu√≠da).")

    # M√©todo para exibir n√∫meros vendidos e dispon√≠veis
    def exibir_numeros(self):
        """Exibe os n√∫meros vendidos e a quantidade de n√∫meros restantes."""
        if self.numerosVendidos:
            print("N√∫meros vendidos:", self.numerosVendidos)
        else:
            print("Nenhum n√∫mero foi vendido ainda.")
        print(f"N√∫meros dispon√≠veis: {self.qntdNumeros - len(self.numerosVendidos)}")

    # M√©todo para sortear um vencedor
    def sortear_vencedor(self):
        """Sorteia um vencedor entre os n√∫meros vendidos."""
        if self.numerosVendidos:
            vencedor = random.choice(self.numerosVendidos)
            print(f"O vencedor da rifa √© o n√∫mero: {vencedor}")
        else:
            print("Nenhum n√∫mero foi vendido. N√£o √© poss√≠vel realizar o sorteio.")

# Fun√ß√£o para exibir o menu com op√ß√µes para o usu√°rio
def exibir_menu():
    print("\nEscolha uma das op√ß√µes:")
    print("1. Exibir informa√ß√µes da rifa")
    print("2. Vender um n√∫mero")
    print("3. Exibir n√∫meros vendidos")
    print("4. Sortear um vencedor")
    print("5. Sair")

# Exemplo de uso
rifa = Rifa("Rifa de Natal üéÖ", 100, 10.0)

while True:
    exibir_menu()  # Exibe o menu para o usu√°rio
    try:
        escolha = int(input("Escolha uma op√ß√£o: "))
        
        if escolha == 1:
            rifa.exibir_rifa()  # Exibe as informa√ß√µes da rifa
        elif escolha == 2:
            numero = int(input("Digite o n√∫mero a ser vendido: "))
            rifa.vender_numero(numero)  # Realiza a venda
        elif escolha == 3:
            rifa.exibir_numeros()  # Exibe n√∫meros vendidos
        elif escolha == 4:
            rifa.sortear_vencedor()  # Sorteia um vencedor
        elif escolha == 5:
            print("Saindo do sistema...")
            break
        else:
            print("Op√ß√£o inv√°lida. Tente novamente.")
    except ValueError:
        print("Por favor, insira um n√∫mero v√°lido.")